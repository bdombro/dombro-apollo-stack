input CreateUserInput {
	email: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of
the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A string that represents a numeric money value
"""
scalar Money

type Mutation {
	"""
	Mutation that creates a new user.
	All fields are required
	"""
	createUser(input: CreateUserInput!): User

	"""
	Mutation that updates a specified user
	Only field required is the ID.
	User can then update one to all of the fields
	If no fields are passed in, the user is not changed.
	"""
	updateUser(input: UpdateUserInput!): User
}

interface Node {
	id: ID!
}

type PageInfo {
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: PaginationCursor
	endCursor: PaginationCursor
}

"""
An opaque string that can be used in a pagination operation
"""
scalar PaginationCursor

type Query {
	node(id: ID!): Node
	nodes(ids: [ID!]!): [Node]!

	"""
	Find a specific user by it's globally uinque identifier
	"""
	user(id: ID!): User

	"""
	Find a collection of users by defined filters, may return 0 results
	"""
	users(
		"""
		Returns the first n elements from the list
		"""
		first: Int! = 25

		"""
		Returns the elements in the list that come after the specified cursor
		"""
		after: PaginationCursor

		"""
		The possible fields to filter account, found in 'input AccountListFilters'
		"""
		filters: UserListFilters
	): UserConnection
}

input UpdateUserInput {
	email: String
}

type User implements Node {
	"""
	Unique identifier, in the form of a node ID, for a user. For more information on node IDs reference https://relay.dev/
	"""
	id: ID!

	"""
	Timestamp of when user was created
	"""
	createdAt: DateTime!

	"""
	Timestamp of when user was last updated
	"""
	updatedAt: DateTime!

	"""
	User's name
	"""
	email: String!
}

"""
For further explanation on GraphQL connections and edges, reference
https://blog.apollographql.com/explaining-graphql-connections-c48b7c3d6976
"""
type UserConnection {
	pageInfo: PageInfo!
	edges: [UserEdge!]!
}

type UserEdge {
	cursor: PaginationCursor!
	node: User!
}

"""
Possible fields to filter User by
"""
input UserListFilters {
	email: String
}
