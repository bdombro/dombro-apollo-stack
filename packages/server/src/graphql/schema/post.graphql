# Type Extensions

# Query Types
extend type Query {
	"Find a specific post by it's globally uinque identifier"
	post(id: ID!): Post
	"Find a collection of posts by defined filters, may return 0 results"
	posts(
		"Returns the first n elements from the list"
		first: Int!
		"Returns the elements in the list that come after the specified cursor"
		after: PaginationCursor
		"The possible fields to filter account, found in 'input AccountListFilters'"
		filters: PostListFilters
	): PostConnection
}

# Mutation Types
extend type Mutation {
	"""
	Mutation that creates a new post.
	All fields are required
	"""
	createPost(input: CreatePostInput!): Post
	"""
	Mutation that updates a specified post
	Only field required is the ID.
	DbPost can then update one to posts of the fields
	If no fields are passed in, the post is not changed.
	"""
	updatePost(input: UpdatePostInput!): Post
}

# Connection Types
"For further explanation on GraphQL connections and edges, reference https://blog.apollographql.com/explaining-graphql-connections-c48b7c3d6976"
type PostConnection {
	pageInfo: PageInfo!
	edges: [PostEdge!]!
}

type PostEdge {
	cursor: PaginationCursor!
	node: Post!
}

# DbPost Type
type Post implements Node {
	"Unique identifier, in the form of a node ID, for a post. For more information on node IDs reference https://relay.dev/"
	id: ID!
	"Timestamp of when post was created"
	createdAt: DateTime!
	"Timestamp of when post was last updated"
	updatedAt: DateTime!
	"Author of the post"
	author: User!
	"DbPost's name"
	title: String!
}

extend type User {
	"""
	All posts authored by this user
	"""
	posts(first: Int! = 25, after: PaginationCursor): PostConnection
}

# Mutation to create a new post
input CreatePostInput {
	authorId: ID
	title: String!
}

# Mutation to update a post
input UpdatePostInput {
	id: ID!
	title: String
}

# Input filters for posts query
"Possible fields to filter DbPost by"
input PostListFilters {
	authorId: ID
	title: String
}
