# Type Extensions

# Query Types
extend type Query {
	"Find a specific user by it's globally uinque identifier"
	user(id: ID!): User
	"Find a collection of users by defined filters, may return 0 results"
	users(
		"Returns the first n elements from the list"
		first: Int! = 25
		"Returns the elements in the list that come after the specified cursor"
		after: PaginationCursor
		"The possible fields to filter account, found in 'input AccountListFilters'"
		filters: UserListFilters
	): UserConnection
}

# Mutation Types
extend type Mutation {
	"""
	Mutation that creates a new user.
	All fields are required
	"""
	createUser(input: CreateUserInput!): User
	"""
	Mutation that updates a specified user
	Only field required is the ID.
	User can then update one to all of the fields
	If no fields are passed in, the user is not changed.
	"""
	updateUser(input: UpdateUserInput!): User
}

# Connection Types
"For further explanation on GraphQL connections and edges, reference https://blog.apollographql.com/explaining-graphql-connections-c48b7c3d6976"
type UserConnection {
	pageInfo: PageInfo!
	edges: [UserEdge!]!
}

type UserEdge {
	cursor: PaginationCursor!
	node: User!
}

# User Type
type User implements Node {
	"Unique identifier, in the form of a node ID, for a user. For more information on node IDs reference https://relay.dev/"
	id: ID!
	"Timestamp of when user was created"
	createdAt: DateTime!
	"Timestamp of when user was last updated"
	updatedAt: DateTime!
	"User's name"
	email: String!
}

# Mutation to create a new user
input CreateUserInput {
	email: String!
}

# Mutation to update a user
input UpdateUserInput {
	email: String
}

# Input filters for users query
"Possible fields to filter User by"
input UserListFilters {
	email: String
}
